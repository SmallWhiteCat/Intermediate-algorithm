# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if not headA or not headB:
            return None
        k1, k2 = 0, 0
        p1 = ListNode(0)
        p2 = ListNode(0)
        p1.next = headA
        p2.next = headB
        while p1.next or p2.next:
            if p1.next and p2.next:
                p1 = p1.next
                p2 = p2.next
            elif p1.next:
                p1 = p1.next
                k1 += 1
            elif p2.next:
                p2 = p2.next
                k2 += 1
        print(k1, k2)
        
        p1.next = headA
        p2.next = headB
        while k1:
            p1 = p1.next
        while k2:
            p2 = p2.next
        n = 1
        # while p1.next:
        #     p1 = p1.next
        #     p2 = p2.next
            # if p1.val == p2.val and n:
            #     p3 = p1.next
            #     n = 0
            # if p1.val != p2.val:
            #     p3 = None
            #     n = 1
        if not n:
            return p3
        return False
